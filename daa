ASSIGNMENT 1 
(Square of Large Integer Numbers Using Divide and 
Conquer) 
def square_large_number(num): 
if len(num) == 1:  # Base case for single-digit numbers 
return str(int(num) ** 2) 
n = len(num) 
mid = n // 2 
# Divide the number into two halves 
left = num[:mid] 
right = num[mid:] 
# Recursive calls 
z0 = int(square_large_number(right)) 
z1 = int(square_large_number(left)) 
z2 = int(square_large_number(str(int(left) + int(right)))) 
# Using the formula (10^(2*m))z1 + (10^m)(z2 - z1 - z0) + z0 
m = len(right) 
result = z1 * (10 ** (2 * m)) + (z2 - z1 - z0) * (10 ** m) + z0 
return str(result) 
# User input and output 
num = input("Enter a large integer number: ") 
result = square_large_number(num) 
print(f"The square of {num} is: {result}") 
OUTPUT: 
Enter a large integer number: 12345678901234567890 
The square of 12345678901234567890 is: 
152415787532388367501905199875019052100 

  ASSIGNMEMT 2 
(Job Scheduling for Maximum Profit (Greedy 
Algorithm) 
def job_scheduling(deadlines, profits): 
n = len(deadlines) 
jobs = sorted(zip(deadlines, profits), key=lambda x: -x[1])  # Sort by profit 
descending 
time_slots = [-1] * n  # -1 indicates the time slot is free 
total_profit = 0 
for deadline, profit in jobs: 
for t in range(min(deadline, n) - 1, -1, -1):  # Try to find a free slot before the 
deadline 
if time_slots[t] == -1: 
time_slots[t] = profit 
total_profit += profit 
break 
return total_profit, [job for job in time_slots if job != -1] 
# User input and output 
n = int(input("Enter the number of tasks: ")) 
deadlines = list(map(int, input("Enter deadlines for the tasks: ").split())) 
profits = list(map(int, input("Enter profits for the tasks: ").split())) 
total_profit, selected_jobs = job_scheduling(deadlines, profits) 
print(f"Maximum profit is: {total_profit}") 
print(f"Selected jobs for maximum profit: {selected_jobs}") 
OUTPUT: 
Enter the number of tasks: 5 
Enter deadlines for the tasks: 2 1 2 1 3 
Enter profits for the tasks: 100 19 27 25 15 
Maximum profit is: 142 
Selected jobs for maximum profit: [100, 27, 15] 

 ASSIGNMENT 3  
(Minimum Spanning Tree Using Floyd-Warshall 
Algorithm) 
def floyd_warshall(cost_matrix): 
n = len(cost_matrix) 
dist = [[cost_matrix[i][j] if cost_matrix[i][j] != -1 else float('inf') for j in range(n)] 
for i in range(n)] 
for k in range(n): 
for i in range(n): 
for j in range(n): 
dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j]) 
return dist 
# User input and output 
n = int(input("Enter the number of offices: ")) 
print("Enter the cost matrix (-1 for no connection):") 
cost_matrix = [list(map(int, input().split())) for _ in range(n)] 
result = floyd_warshall(cost_matrix) 
print("Minimum cost to connect all offices:") 
for row in result: 
print(" ".join(map(lambda x: str(x) if x != float('inf') else 'INF', row))) 
OUTPUT: 
Enter the number of offices: 4 
Enter the cost matrix (-1 for no connection): 
0 5 -1 10 
5 0 3 -1 -1 3 0 1 
10 -1 1 0 
Minimum cost to connect all offices: 
0 5 8 9 
5 0 3 4 
8 3 0 1 
9 4 1 0 

 ASSIGNMENT 4  
(Network Delay Time Using Dijkstra’s Algorithm) 
import heapq 
def dijkstra(edges, n, k): 
graph = {i: [] for i in range(1, n + 1)} 
for u, v, w in edges: 
graph[u].append((w, v)) 
dist = {i: float('inf') for i in range(1, n + 1)} 
dist[k] = 0 
min_heap = [(0, k)] 
while min_heap: 
curr_dist, node = heapq.heappop(min_heap) 
if curr_dist > dist[node]: 
continue 
for weight, neighbor in graph[node]: 
distance = curr_dist + weight 
if distance < dist[neighbor]: 
dist[neighbor] = distance 
heapq.heappush(min_heap, (distance, neighbor)) 
max_dist = max(dist.values()) 
return max_dist if max_dist != float('inf') else -1 
# User input and output 
n, m = map(int, input("Enter the number of nodes and edges: ").split()) 
edges = [] 
print("Enter edges in the format (u, v, w):") 
for _ in range(m): 
edges.append(tuple(map(int, input().split()))) 
k = int(input("Enter the starting node: ")) 
result = dijkstra(edges, n, k) 
print(f"The time for all nodes to receive the signal is: {result}") 
OUTPUT: 
Enter the number of nodes and edges: 4 4 
Enter edges in the format (u, v, w): 
1 2 2 
1 3 5 
2 3 1 
3 4 2 
Enter the starting node: 1 
The time for all nodes to receive the signal is: 6 

 ASSIGNMENT 5 
(Knight’s Tour Problem) 
def is_safe(x, y, board): 
return 0 <= x < len(board) and 0 <= y < len(board) and board[x][y] == -1 
def knights_tour(n): 
board = [[-1 for _ in range(n)] for _ in range(n)] 
moves = [(2, 1), (1, 2), (-1, 2), (-2, 1), (-2, -1), (-1, -2), (1, -2), (2, -1)] 
board[0][0] = 0 
def solve(x, y, move_count): 
if move_count == n * n: 
return True 
for dx, dy in moves: 
nx, ny = x + dx, y + dy 
if is_safe(nx, ny, board): 
board[nx][ny] = move_count 
if solve(nx, ny, move_count + 1): 
return True 
board[nx][ny] = -1 
return False 
if solve(0, 0, 1): 
return board 
else: 
return None 
# User input and output 
n = int(input("Enter the size of the chessboard: ")) 
solution = knights_tour(n) 
if solution: 
print("Knight's Tour solution:") 
for row in solution: 
print(" ".join(map(str, row))) 
else: 
print("No solution exists.") 
OUTPUT: 
Enter the size of the chessboard: 5 
Knight's Tour solution: 
0 17 8 23 20 
7 22 19 2 9 
18 1 16 21 24 
15 6 3 10 13 
4 11 14 5 12 

 ASSIGNMENT 6 
(Club Assignment Problem Using Branch and 
Bound) 
from scipy.optimize import linear_sum_assignment 
import numpy as np 
def club_assignment(cost_matrix): 
cost_matrix = np.array(cost_matrix) 
row_ind, col_ind = linear_sum_assignment(cost_matrix) 
total_cost = cost_matrix[row_ind, col_ind].sum() 
return total_cost, list(zip(row_ind, col_ind)) 
# User input and output 
n = int(input("Enter the number of students and clubs: ")) 
print("Enter the cost matrix:") 
cost_matrix = [list(map(int, input().split())) for _ in range(n)] 
total_cost, assignments = club_assignment(cost_matrix) 
print(f"Minimum total cost is: {total_cost}") 
print("Assignments (Student -> Club):") 
for student, club in assignments: 
print(f"Student {student + 1} -> Club {club + 1}") 
OUTPUT: 
Enter the number of students and clubs: 3 
Enter the cost matrix: 
9 2 7 
6 4 3 
5 8 1 
Minimum total cost is: 10 
Assignments (Student -> Club): 
Student 1 -> Club 2 
Student 2 -> Club 3 
Student 3 -> Club 1
